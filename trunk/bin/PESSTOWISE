#!/usr/bin/env python
description = "> archiving spectra in WISE "
usage = "%prog  \t  listspectra [option] "

import os
import sys
import re
import ntt
import datetime
try:
    import pyfits
except:
    from astropy.io import fits as pyfits

from optparse import OptionParser

if __name__ == "__main__":
    parser = OptionParser(usage=usage, description=description,
                          version="%prog " + str(ntt.__version__))
    parser.add_option("-c", "--correctobj", dest="correctobj", default='', type="str",
                      help='file containing name of objects \t [%default]')
    # parser.add_option("-l",
    # "--list",dest="input",default='listfile',type="str", help='name -l list
    # \t [%default]')
    option, args = parser.parse_args()
    if len(args) < 1:  # or  option.input=='listfiles':
        sys.argv.append('--help')
    option, args = parser.parse_args()
    filenameobjects = option.correctobj

    def julday(year, month, day, hour, min):
        # print "LOGX:: Entering `julday` method/function in %(__file__)s\n" %
        # globals()
        import math

        univTime = float(hour) + (float(min) / 60.)
        if ((100 * float(year)) + float(month) - 190002.5) >= 0:
            sign = 1
        else:
            sign = -1
        part1 = 367 * float(year)
        part2 = math.floor(
            (7 * (float(year) + math.floor((float(month) + 9) / 12))) / 4)
        part3 = float(day) + math.floor((275 * float(month)) / 9)
        part4 = 1721013.5 + (univTime / 24)
        part5 = 0.5 * sign
        jd = part1 - part2 + part3 + part4 - part5 + 0.5
        return jd

    ##########################################################################
    title = 'Obj-name	Ascii-filename\tFITS-filename\tObs-date [YYYY-MM-DD]\tObs-UT [HH:MM:SS]\tInst-Id\t' + \
            'Observer/s\tExptime\tSlit\tReducer\tReduction-date\tQuality [Rapid/Final/Low/Med/High] \tSpec-Type ' \
            '[Object/Host/Sky/Arcs]\tSpec-Remarks\tPublish\t' + \
            'Contrib\tAirmass\tDichroic\tGrism\tGrating\tObj-RA\tObj-DEC\tIAU-name\tObj-type-Id\t' + \
            'Redshift\tHost\tRelated-file1\tRelated-file2\n'
    line1 = '[NULL]\t[NULL]\t[Unknown]\t[0]\t[0]\t[Unknown]\t[Obs-date]\t[NULL]\t[NULL]\t[NULL]\t[NULL]\t' + \
            '[NULL]\t[NULL]\t[NULL]\t[NULL]\t[NULL]\t[NULL]\t[NULL]\t[NULL]\t[NULL]\t[NULL]\n'
    title = title + line1

    spectralTypesDict = {
        "Other": 0,
        "SN": 1,
        "SN I": 2,
        "SN Ia": 3,
        "SN Ib": 4,
        "SN Ic": 5,
        "SN Ib/c": 6,
        "SN Ic-BL": 7,
        "SN Ib - Ca-rich": 8,
        "SN Ibn": 9,
        "SN II": 10,
        "SN IIP": 11,
        "SN IIL": 12,
        "SN IIn": 13,
        "SN IIb": 14,
        "SN I-faint": 15,
        "SN I-rapid": 16,
        "SLSN-I": 18,
        "SLSN-II": 19,
        "SLSN-R": 20,
        "Afterglow": 23,
        "LBV": 24,
        "ILRT": 25,
        "Nova": 26,
        "CV": 27,
        "Varstar": 28,
        "AGN": 29,
        "Galaxy": 30,
        "QSO": 31,
        "Std-spec": 50,
        "Gap": 60,
        "Gap I": 61,
        "Gap II": 62,
        "SN impostor": 99,
        "SN Ia-pec": 100,
        "SN Ia-SC": 102,
        "SN Ia-91bg-like": 103,
        "SN Ia-91T-like": 104,
        "SN Ia-02cx-like": 105,
        "SN Ia-CSM": 106,
        "SN Ib-pec": 107,
        "SN Ic-pec": 108,
        "SN II-pec": 110,
        "SN IIn-pec": 112,
        "TDE": 120,
        "WR": 200,
        "WR-WN": 201,
        "WR-WC": 202,
        "WR-WO": 203,
        "M dwarf": 210
    }

    import collections
    from operator import itemgetter
    spectralTypesDict = collections.OrderedDict(
        sorted(spectralTypesDict.items(), key=itemgetter(1)))

    spectralTypesString = """
\tObject Type Codes
\t=================
"""
    for k, v in spectralTypesDict.iteritems():
        v = str(v).ljust(6, ' ')
        spectralTypesString += "\t%(v)s %(k)s\n" % locals()

    ######################################################################
    parent_dir = os.getcwd() + '/'
    now = datetime.datetime.now()
    datenow = now.strftime('20%y%m%d_%H_%M')
    JD = julday(now.year, now.month, now.day, now.hour, now.minute)
    user = os.environ['USER']
    answer = 'yes'
    lista = ntt.util.readlist(args[0])
    filetar = lista[:]
    _host0 = _redshift0 = _objtype0 = _iauname0 = _dichroic0 = 'NULL'
    _contrib0 = _publish0 = _note0 = _reducer0 = _reducerdate0 = 'NULL'
    _host = _redshift = _objtype = _iauname = _dichroic = _contrib = _publish = _note = _reducer = _reducerdate = 'NULL'
    object1 = object2 = _spectype = _quality = 'NULL', 'NULL', 'NULL', 'NULL'

    _observer0 = pyfits.open(lista[0])[0].header.get('observer')
    if not _observer0:
        _observer0 = 'NULL'

    _observer = input('Who were the observers that took the spectral frame (comma-delimited list) `' +
                          lista[0] + '`  [' + _observer0 + '] ? ')
    if not _observer:
        _observer = _observer0
    else:
        _observer0 = _observer
    _reducer = input('\nWho reduced the spectral frame (comma-delimited list) `' +
                         lista[0] + '`  [' + _reducer0 + ']? ')

    _quality = ntt.util.readkey3(ntt.util.readhdr(lista[0]), 'quality')
    if _quality not in ['Rapid', 'Final', 'Low', 'Med', 'High']:
        while _quality not in ['Rapid', 'Final', 'Low', 'Med', 'High']:
            _quality = input(
                '\nWhat is the quality of the spectrum [[Rapid]/Final/Low/Med/High] ? ')
            if not _quality:
                _quality = 'Rapid'

    filetar.append('pessto_' + str(datenow) + '_' +
                   str(_quality) + '_upload.txt')
    f = open('pessto_' + str(datenow) + '_' +
             str(_quality) + '_upload.txt', 'w')
    f.write(title)
    f.close()

    if not _reducer:
        _reducer = _reducer0
    else:
        _reducer0 = _reducer
    for image in lista:
        hdr = ntt.util.readhdr(image)
        imageasci = re.sub('.fits', '.asci', image)
        lam, fl = ntt.util.readspectrum(image)
        f = open(imageasci, 'w')
        for i in range(0, len(lam)):
            f.write('%10s\t%10s\n' % (lam[i], fl[i]))
        f.close()
        filetar.append(imageasci)
        if lam.any() and fl.any():
            f = open('pessto_' + str(datenow) + '_' +
                     str(_quality) + '_upload.txt', 'a')
            _RA = ntt.util.readkey3(hdr, 'RA')
            _DEC = ntt.util.readkey3(hdr, 'DEC')
            useheader = True
            if filenameobjects:
                ###################################
                _ra1, _dec1, _name = ntt.util.correctobject(
                    image, filenameobjects)
                if _name:
                    print('### ', str(_ra1), str(_dec1), str(_name))
                    _RA = _ra1
                    _DEC = _dec1
                    _object0 = _object = str(_name)
                    useheader = False
                else:
                    useheader = True
                    _object0 = ntt.util.readkey3(hdr, 'object')
            else:
                _object0 = ntt.util.readkey3(hdr, 'object')
            if useheader:
                print('\n\tNote: If the object has been reported to the TNS and has been classified as a supernova please give the name of the object as a SN designation (e.g. SN2016abc).')
                print('\tIf however the TNS object has been given a classification other than supernova, please report the AT name here (e.g. AT2016abc).')
                print('\tFinally, if the source is not on the TNS give the name as reported by the discovery survey (see PESSTO Marshall).')

                _object = input(
                    '\nWhat is the name of the object  in spectral frame `' + image + '`  [' + _object0 + '] ? ')
                if not _object:
                    _object = _object0
                else:
                    _object0 = _object
            else:
                _object = _object0
            ###################################
            _exptime = ntt.util.readkey3(hdr, 'exptime')
            _JD = ntt.util.readkey3(hdr, 'JD')
            _grism = ntt.util.readkey3(hdr, 'grism')
            _filter = ntt.util.readkey3(hdr, 'filter')
            _airmass = ntt.util.readkey3(hdr, 'airmass')
            goon = 'yes'
            while goon == 'yes':
                _instrume = ntt.util.readkey3(hdr, 'instrume')
                if _instrume == 'efosc':
                    _instrume = '31'
                    goon = 'no'
                elif _instrume == 'sofi':
                    _instrume = '34'
                    goon = 'no'
                else:
                    print('\nThe instrument is not recognised. Which instrument was used? ')
                    _instrume = input('SOFI [34] or EFOSC [31] ?')
                if _instrume in ['31', '34']:
                    goon = 'no'
                #   slit
            _slit = ntt.util.readkey3(hdr, 'slit')
            try:
                float(re.sub('slit', '', _slit))
                _slit = float(re.sub('slit', '', _slit))
            except:
                if _slit == 'long_slit_1':
                    _slit = '1.0'
                else:
                    print('\nThe slit width is not found. Which slit width was used? ')
                    _slit = input('slit (1.0,1.5,2.0,.....) [1.0] ? ')
                    if not _slit:
                        _slit = '1.0'
            # print('Please insert bibcode string (eg 2011MNRAS.tmp.1220V) ')
            #_publish=input('Is the spectrum published '+image+'  ['+_publish0+'] ? ')
            # if not _publish:_publish=_publish0
            # else: _publish0=_publish
            if _publish0 != 'NULL':
                print('Please insert reference  (eg Valenti et al 2011) ')
                _contrib = input(
                    'first author and year of ' + image + '  [' + _contrib0 + '] ? ')
            if not _contrib:
                _contrib = _contrib0
            else:
                _contrib0 = _contrib
            goon = 'yes'
            while goon == 'yes':
                print(spectralTypesString)
                _objtype = input(
                    '\nWhat is the spectral type of the object in spectral frame `' + image + '`  [' + _objtype0 + '] ? ')
                if not _objtype:
                    _objtype = _objtype0
                else:
                    _objtype0 = _objtype
                try:
                    int(_objtype)
                    if int(_objtype) in spectralTypesDict.values():
                        goon = 'no'
                        _objtype = int(_objtype)
                except:
                    if str(_objtype) in spectralTypesDict.keys():
                        _objtype = spectralTypesDict[str(_objtype)]
                        goon = 'no'
                if goon == 'yes':
                    print('\n Warning: value not valid, try again \n')

            #_host=input('which is the host '+image+'  ['+_host0+'] ? ')
            # if not _host: _host=_host0
            # else: _host0=_host
            _host = _host0
            _redshift = input(
                '\nWhat is the redshift of the host galaxy in ' + image + '  [' + _redshift0 + '] ? ')
            if not _redshift:
                _redshift = _redshift0
            else:
                _redshift0 = _redshift

            while _spectype not in ['Object', 'Host', 'Sky', 'Arcs']:
                _spectype = input(
                    '\nWhat type of spectrum is this [Object, Host, Sky, Arcs] ? ')
                if not _spectype:
                    _spectype = 'Object'

            _iauname = _iauname0
            _UT = ntt.util.readkey3(hdr, 'ut')

            _date = ntt.util.readkey3(hdr, 'date-obs')
            if _date:
                _date = _date[0:4] + '-' + _date[4:6] + '-' + _date[6:8]
            else:
                _date = 'NULL'
            object1 = re.sub('_f.fits', '_f.png', image)
            #               object11=re.sub('_f.fits','_f.ps',image)
            object2 = re.sub('_f.fits', '_2df.fits', image)
            if os.path.isfile(object1):
                filetar.append(object1)
            # elif os.path.isfile(object11):        filetar.append(object11)
            else:
                object1 = 'NULL'
            if os.path.isfile(object2):
                filetar.append(object2)
            else:
                object2 = 'NULL'

            line = '%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t' \
                '%s\t%s\t%s\t%s\t%s\n' % \
                (_object, imageasci, image, _date, _UT, _instrume, _observer, str(int(_exptime)), str(_slit),
                 str(_reducer), _reducerdate, str(_quality), str(
                    _spectype), _note, _publish, _contrib,
                 str(_airmass), str(_dichroic), str(_grism), str(
                    _filter), str(_RA), str(_DEC), str(_iauname),
                 _objtype, _redshift, _host, object1, object2)
            print(line)
            f.write(line)
            f.close()

    stringa = ''

    for img in filetar:
        stringa = stringa + img + ' '
    os.system('tar -zcvf pessto_' + str(datenow) + '_' +
              str(_quality) + '_upload.tgz ' + stringa)
